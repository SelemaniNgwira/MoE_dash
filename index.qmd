---
title: "Chloracne Study progress Dashboard"
format: dashboard
---



```{r}


library(tidyverse)

library(plotly)

library(reactable)
library(bslib)
pacman::p_load(bsicons, shiny, ggspark, sparkline, tsibble)


pacman::p_load(tidyverse, here, summarytools, janitor, sf, tmap,OpenStreetMap, 
               rio, robotoolbox)


```




```{r}

# 
token<-kobo_token(
  username = "phim",
  password = "mpox@2025",
  url= "https://kf.kobotoolbox.org")


# setting up the link 

kobo_setup(url = "https://kf.kobotoolbox.org", token = token)

# listing the projects in the kobo account
my_account_project<-kobo_asset_list()

# getting UID of the interet project by number
study_id<-my_account_project$uid[2]

# getting the file of the cholera study project
study_data<-kobo_asset(study_id)

# getting the actual cholera data set
study_data<-kobo_data(study_data)


```




```{r}



```



# Overview of key Indicators

## Row{height=25%}


```{r}

total<- study_data |> 
  count(Pid)|> 
  summarise(total=sum(n), 
            total=round(total/140, digits = 3)*100)


value_box(
  title = "Completeness",
  value = tags$div(total$total, class = "value-box-value"),
  showcase = bs_icon("percent"),
  theme = "text-success", 
  showcase_layout = "top right"
)

```



### 

```{r}

cases<- study_data|> 
       select(ill_sts) |> 
       filter(ill_sts=="case") |> 
       count()

# define the thems 

cases_them<-value_box_theme(
  bg="white", 
  fg="red"
)

value_box(
  title = "Number of cases enrolled",
  value = cases,
  showcase = bsicons::bs_icon("person-dash"), 
  theme = cases_them, 
  showcase_layout = "top right"
  
)


```




### 

```{r}

control<- study_data|> 
       select(ill_sts) |> 
       filter(ill_sts=="control") |> 
       count()

# define the thems 

control_them<-value_box_theme(
  bg="white", 
  fg="green"
)

value_box(
  title = "Number of Controls enrolled",
  value = control,
  showcase = bsicons::bs_icon("person-fill-add"), 
  theme = control_them, 
  showcase_layout = "top right"
  
)


```



## Row 

### Tab {width=60%}

```{r}

theme_set(theme_minimal())


dis_case_contr <- study_data |> 
  select(Dist, ill_sts) |> 
  group_by(Dist, ill_sts) |> 
  count(ill_sts) |> 
  summarise(precent=round(n/sum(n)))


dis_case_contr$Dist<-str_to_title(dis_case_contr$Dist)

plot1 <- ggplot(dis_case_contr, mapping= aes( y=Dist, x=precent, fill = ill_sts))+
  geom_col(position = "dodge")+
  labs(
    y="District Name", 
    x="Number of enrrollment", 
    
    title = "Number of study enrollment per district"
  )
  






ggplotly(plot1)

```



### Trends 1 {.tabset}

```{r}


malawi_shp<- st_read(here(
  "data/mwi_admbnda_adm2_nso_hotosm_20230405.shp"
)) |> 
  select(ADM2_EN) |>
  rename(district=ADM2_EN)

team_move<-study_data |> 
  select()



tmap_options(check.and.fix = TRUE)

tmap_mode("view")

tm_shape(malawi_shp)+
  tm_borders(col = "black")+
  tm_text("district", 
          size = 0.5)
  


```



```{r}
date_report<- c( 
            "2024-05-01",
            "2024-06-01",
            "2024-07-01",
            "2024-08-01",
            "2024-09-01",
            "2024-10-01",
            "2024-11-01", 
            "2024-12-01", 
            "2025-01-01", 
            "2025-02-01", 
            "2025-03-01", 
            "2025-04-01"
               )

date_report <- seq.Date(from = as.Date("2024-05-01"), by = "week", length.out = 52)



# Generate random numbers (e.g., between 1 and 100)
set.seed(123)  # for reproducibility
incidance_rate <- sample(0:12, length(date_report), replace = TRUE)


pregnancy_incidence<- data.frame(date_report= date_report, incidance_rate = incidance_rate)



pregnancy_incidence<- pregnancy_incidence |> 
  mutate(date_report=as.Date(date_report))


pregnancy_incidence <- tibble(pregnancy_incidence, index=date_report)

plot2<- pregnancy_incidence |> 
  ggplot(aes(x = date_report, y = incidance_rate)) +
  geom_line() +
  scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
  labs(x = "Month", y = "School drop out  Rate", 
       title = "Dropout rate due to pregnancy Over Time") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplotly(plot2)


```

